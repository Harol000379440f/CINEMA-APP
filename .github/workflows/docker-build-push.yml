name: Build, Scan, and Push Docker Image # Nombre del workflow

on: 
  push:
    branches:
      - main # Este pipeline se ejecutará cuando se haga push a la rama "main"

jobs: 
  build-and-scan-and-push:
    runs-on: ubuntu-latest # Utiliza el último sistema Ubuntu como entorno de ejecución
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code # Clona el repositorio en el runner
        uses: actions/checkout@v3 # Acción oficial de GitHub para clonar el código

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub # Inicia sesión en Docker Hub
        uses: docker/login-action@v2 # Acción oficial para autenticar en Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Usuario almacenado como secreto
          password: ${{ secrets.DOCKER_PASSWORD }} # Contraseña almacenada como secreto

      # Step 3: Normalize and Build Docker Image
      - name: Build Docker Image # Construye la imagen Docker
        run: |
          echo "Starting Docker build..." # Mensaje de inicio del paso
          DOCKER_USERNAME=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]') # Normaliza el nombre de usuario a minúsculas
          echo "Using Docker username: $DOCKER_USERNAME" # Imprime el nombre de usuario

          # Construye la imagen Docker usando el Dockerfile del proyecto
          docker build -t $DOCKER_USERNAME/cinema-app:latest . 
          echo "Docker build completed." # Mensaje de finalización

          # Lista las imágenes Docker disponibles, útil para depuración
          echo "Listing Docker images..."
          docker images

      # Step 4: Scan Docker Image with Trivy
      - name: Scan Docker Image with Trivy # Escanea vulnerabilidades con Trivy
        uses: aquasecurity/trivy-action@master # Acción oficial de Trivy
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/cinema-app:latest # Imagen que se va a escanear
          severity: CRITICAL,HIGH,MEDIUM # Niveles de severidad a detectar
          ignore-unfixed: true # Ignora vulnerabilidades conocidas sin solución aún
          exit-code: 1 # Falla el pipeline si encuentra vulnerabilidades en los niveles configurados
        # DOCUMENTACIÓN:
        # Este paso utiliza Trivy para escanear la imagen Docker generada.
        # Busca vulnerabilidades críticas, altas y medianas, y detiene el pipeline si las encuentra.
        # Ignora las vulnerabilidades que aún no tienen parche.

      # Step 5: Push Docker Image
      - name: Push Docker Image # Publica la imagen Docker en Docker Hub
        if: success() # Solo se ejecuta si el escaneo de Trivy pasa sin errores
        run: |
          echo "Starting Docker push..." # Mensaje de inicio del paso
          DOCKER_USERNAME=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]') # Normaliza el nombre de usuario a minúsculas
          docker push $DOCKER_USERNAME/cinema-app:latest # Empuja la imagen al registro Docker
          echo "Docker push completed." # Mensaje de finalización

      # Step 6: Unit Tests for Docker Workflow
      - name: Unit Test Docker Workflow # Ejecuta pruebas unitarias en el pipeline
        if: success() # Solo se ejecuta si los pasos anteriores tienen éxito
        run: |
          echo "Running pipeline tests..." # Mensaje de inicio

          # Test 1: Asegura que el nombre de usuario Docker es válido
          DOCKER_USERNAME=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          if [ -z "$DOCKER_USERNAME" ]; then
            echo "Error: DOCKER_USERNAME is empty"
            exit 1
          fi
          if [ "$DOCKER_USERNAME" != "$(echo "$DOCKER_USERNAME" | tr '[:upper:]' '[:lower:]')" ]; then
            echo "Error: DOCKER_USERNAME is not lowercase"
            exit 1
          fi
          echo "DOCKER_USERNAME validation passed" # Validación del nombre de usuario completada

          # Test 2: Verifica que la imagen Docker fue construida exitosamente
          echo "Validating Docker image build..."
          docker inspect --type=image "$DOCKER_USERNAME/cinema-app:latest" > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Error: Docker image $DOCKER_USERNAME/cinema-app:latest not found"
            exit 1
          fi
          echo "Docker image build validation passed" # Imagen construida validada

          # Test 3: Validación de push simulado (mock)
          echo "Validating Docker push (mock test)..."
          MOCK_PUSH_RESULT=0  # Simulación de éxito en push
          if [ $MOCK_PUSH_RESULT -ne 0 ]; then
            echo "Error: Docker image push failed"
            exit 1
          fi
          echo "Docker push validation passed" # Validación de push completada

          # Mensaje de éxito final
          echo "All pipeline tests passed successfully."